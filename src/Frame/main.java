/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Frame;

import Lista.Nodo;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.util.ArrayList;
import javax.swing.JFileChooser;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author lazarod
 */
public class main extends javax.swing.JFrame {

    /**
     * Creates new form main
     */
    File file;
    Nodo ptr, ptr2;
    String[][] primas = new String[27][2];
    ArrayList<Character> probadas = new ArrayList();
    ArrayList<String> cp = new ArrayList();
    ArrayList<String> primeros = new ArrayList();
    ArrayList<String> p_ex = new ArrayList();
    ArrayList<String> sgts = new ArrayList();
    ArrayList<String> ordn = new ArrayList();
    int indice = 0;
    int indice2 = 0;
    int indice3 = 0;
    String inicial;

    public main() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        file_path = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        gramatica = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        primera = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        sgt = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tbm = new javax.swing.JTable();
        jScrollPane5 = new javax.swing.JScrollPane();
        trecon = new javax.swing.JTable();
        cadena = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Cargar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        gramatica.setColumns(20);
        gramatica.setRows(5);
        jScrollPane1.setViewportView(gramatica);

        jLabel1.setText("Gramatica:");

        primera.setColumns(20);
        primera.setRows(5);
        jScrollPane2.setViewportView(primera);

        jLabel2.setText("Primera posicion:");

        sgt.setColumns(20);
        sgt.setRows(5);
        jScrollPane3.setViewportView(sgt);

        jLabel3.setText("Siguiente posicion:");

        tbm.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane4.setViewportView(tbm);

        trecon.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Pila", "Entrada", "Salida"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane5.setViewportView(trecon);

        jLabel4.setText("Cadena a reconocer: ");

        jButton2.setText("Reconocer");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel5.setText("Tabla M: ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addGap(18, 18, 18)
                        .addComponent(file_path, javax.swing.GroupLayout.PREFERRED_SIZE, 341, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 305, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(71, 71, 71)
                                        .addComponent(jLabel2))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(50, 50, 50)
                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 664, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(11, 11, 11)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 69, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(cadena, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(41, 41, 41)
                                        .addComponent(jButton2)))
                                .addGap(47, 47, 47))))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(file_path, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 176, Short.MAX_VALUE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 47, Short.MAX_VALUE)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(47, 47, 47))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(cadena, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton2))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(24, 24, 24))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void ordenar() {
        Nodo p = ptr;
        String is, have;
        while (p != null) {
            if (!ordn.contains(p.getProd().substring(0, 1))) {
                is = es_prima(p.getProd().charAt(0));
                have = tiene_prima(p.getProd().charAt(0));
                if (!is.equals("") || !have.equals("")) {
                    if (!is.equals("")) {
                        Nodo k = ptr;
                        while (k != null) {
                            if (k.getProd().charAt(0) == is.charAt(0)) {
                                agregar_prod3(k.getProd());
                                System.out.print(k.getProd());
                                System.out.print("     ");
                            }
                            k = k.link;
                        }
                        k = ptr;
                        while (k != null) {
                            if (k.getProd().charAt(0) == p.getProd().charAt(0)) {
                                agregar_prod3(k.getProd());
                                System.out.print(k.getProd());
                                System.out.print("     ");
                            }
                            k = k.link;
                        }
                        ordn.add(is.substring(0, 1));
                        ordn.add(p.getProd().substring(0, 1));
                    } else {
                        Nodo k = ptr;
                        while (k != null) {
                            if (k.getProd().charAt(0) == p.getProd().charAt(0)) {
                                agregar_prod3(k.getProd());
                                System.out.print(k.getProd());
                                System.out.print("     ");
                            }
                            k = k.link;
                        }
                        k = ptr;
                        while (k != null) {
                            if (k.getProd().charAt(0) == have.charAt(0)) {
                                agregar_prod3(k.getProd());
                                System.out.print(k.getProd());
                                System.out.print("     ");
                            }
                            k = k.link;
                        }
                        ordn.add(have.substring(0, 1));
                        ordn.add(p.getProd().substring(0, 1));
                    }
                } else {
                    Nodo k = ptr;
                    while (k != null) {
                        if (k.getProd().charAt(0) == p.getProd().charAt(0)) {
                            agregar_prod3(k.getProd());
                            System.out.print(k.getProd());
                            System.out.print("     ");
                        }
                        k = k.link;
                    }
                    ordn.add(p.getProd().substring(0, 1));
                }
            }
            p = p.link;
        }
    }

    String tienerecursividad(String p) {
        String cab = p.substring(0, 1);
        String[] prods = p.split("\\|");
        int i = 0;
        String r = "";
        while (prods.length > i) {
            if (i == 0) {
                if (prods[i].substring(3, 4).equals(cab)) {
                    r = i + "_";
                }
                i++;
            } else {
                if (prods[i].substring(0, 1).equals(cab)) {
                    r = r + i + "_";
                }
                i++;
            }
        }
        if (!"".equals(r)) {
            return r;
        } else {
            return "-1";
        }
    }

    public void agregar_prod(String p) {
        String nt = p.substring(0, 1);
        if (ptr == null) {
            Nodo c = new Nodo(p);
            ptr = c;
        } else {
            Nodo k = ptr;
            while (k != null) {
                if (k.getProd().substring(0, 1).equals(nt)) {
                    k.setProd(k.getProd() + "|" + p.split(">")[1]);
                    break;
                } else {
                    if (k.link == null) {
                        Nodo n = new Nodo(p);
                        k.link = n;
                        break;
                    }
                    k = k.link;
                }
            }
        }
    }

    public void agregar_prod2(String p) {
        String nt = p.substring(0, 1);
        if (ptr == null) {
            Nodo c = new Nodo(p);
            ptr = c;
            inicial = ptr.getProd().substring(0, 1);
        } else {
            Nodo k = ptr;
            while (k.link != null) {
                k = k.link;
            }
            Nodo n = new Nodo(p);
            k.link = n;
        }
    }

    public void agregar_prod3(String p) {
        String nt = p.substring(0, 1);
        if (ptr2 == null) {
            Nodo c = new Nodo(p);
            ptr2 = c;
            inicial = ptr2.getProd().substring(0, 1);
        } else {
            Nodo k = ptr2;
            while (k.link != null) {
                k = k.link;
            }
            Nodo n = new Nodo(p);
            k.link = n;
        }
    }

    public void rapartir() {
        Nodo k = ptr;
        while (k != null) {
            for (int i = 0; i < k.getProd().length(); i++) {
                if (Character.isUpperCase(k.getProd().charAt(i))) {
                    dame_prima(k.getProd().charAt(i));
                }
            }
            k = k.link;
        }
    }

    public void mostrar_prod() {
        Nodo p = ptr;
        String prueba;
        while (p != null) {
            if (!"-1".equals(tienerecursividad(p.getProd()))) {
                elim_rec2(p);

            }
            if (!probadas.contains(p.getProd().charAt(0))) {
                hay_fact(p.getProd());
            }
            System.out.print(p.getProd());
            System.out.print("   ");
            gramatica.append(p.getProd());
            gramatica.append(System.getProperty("line.separator"));
            p = p.link;
        }
    }

    int tamaño() {
        int i = 0;
        Nodo p = ptr;
        while (p != null) {
            i++;
            p = p.link;
        }
        return i;
    }

    public void elim_rec(String p) {
        String[] prods = p.split("\\|");
        String alfa = "", prima, nueva;
        String beta = "";
        Nodo k = ptr;
        int i = 0, cont = 0, j = 0, posi, h = 0, t, cont2 = 0;
        String pos;
        while (k != null) {
            if (k.getProd().equals(p)) {
                pos = tienerecursividad(k.getProd());
                if (!"-1".equals(pos)) {
                    String[] r = pos.split("_");
                    while (j < r.length) {
                        posi = Integer.parseInt(r[j]);
                        if (j == 0) {
                            if (posi == 0) {
                                alfa = prods[posi].substring(4, prods[posi].length()) + p.substring(0, 1) + "'";
                            } else {
                                alfa = prods[posi].substring(1, prods[posi].length()) + p.substring(0, 1) + "'";
                            }
                        } else {
                            if (posi == 0) {
                                alfa = alfa + "|" + prods[posi].substring(4, prods[posi].length()) + p.substring(0, 1) + "'";
                            } else {
                                alfa = alfa + "|" + prods[posi].substring(1, prods[posi].length()) + p.substring(0, 1) + "'";
                            }
                        }
                        j++;
                    }
                    while (i < prods.length) {
                        cont2 = 0;
                        h = 0;
                        while (h < r.length) {
                            t = Integer.parseInt(r[h]);
                            if (i == t) {
                                cont2++;
                            }
                            h++;
                        }
                        if (cont2 == 0) {
                            if (i == 0) {
                                beta = prods[i].substring(3, prods[i].length()) + p.substring(0, 1) + "'";
                                cont++;
                            } else {
                                if (cont == 0) {
                                    beta = prods[i] + p.substring(0, 1) + "'";
                                    cont++;
                                } else {
                                    beta = beta + "|" + prods[i] + p.substring(0, 1) + "'";
                                }
                            }
                            cont++;
                        }
                        i++;
                    }
                }
                if (beta.equals("")) {
                    beta = p.substring(0, 1) + "'";
                }
                nueva = p.substring(0, 1) + "->" + beta;
                prima = p.substring(0, 1) + "'" + "->" + alfa + "|&";
                k.setProd(nueva);
                Nodo temp = k.link;
                Nodo n = new Nodo(prima);
                k.link = n;
                n.link = temp;
                break;
            } else {
                k = k.link;
            }
        }
    }

    public void elim_rec2(Nodo p) {
        String prod = p.getProd();
        String alfa = p.getProd().substring(4, p.getProd().length());
        String prima = dame_prima(p.getProd().charAt(0));
        agregar_prima(p.getProd(), prima);
        if (ya_e(prima)) {
            agregar_prod2(prima + "->&");
        }
        primas[indice][0] = p.getProd().substring(0, 1);
        p.setProd(prima + "->" + alfa + prima);
        primas[indice][1] = prima;
        indice++;
    }

    boolean ya_e(String p) {
        Nodo k = ptr;
        while (k != null) {
            if (k.getProd().equals(p.charAt(0) + "->&")) {
                return false;
            }
            k = k.link;
        }
        return true;
    }

    public void agregar_prima(String p, String prima) {
        Nodo k = ptr;
        while (k != null) {
            if (k.getProd().substring(0, 1).equals(p.substring(0, 1)) && k.tp == false && "-1".equals(tienerecursividad(k.getProd()))) {
                k.setProd(k.getProd() + prima);
                k.tp = true;
            }
            k = k.link;
        }
    }

    String dame_prima(char p) {
        String[] abecedario = {"A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z"};
        Nodo k = ptr;
        int j = 0, t = primas.length, y = 0;
        String prima, prueba1, prueba2;
        while (j < indice2) {
            if (Character.toString(p).equals(primas[j][0])) {
                return primas[j][1];
            } else {
                j++;
            }
        }
        String pureba;
        while (k != null) {
            y = indice3;
            for (int i = 0; i < k.getProd().length(); i++) {
                pureba = Character.toString(k.getProd().charAt(i));
                prueba2 = abecedario[indice3];
                if (Character.toString(k.getProd().charAt(i)).equals(abecedario[indice3])) {
                    indice3++;
                    break;
                }
            }
            if (y == indice3 - 1) {
                k = ptr;
            } else {
                k = k.link;
            }
        }
        primas[indice2][0] = Character.toString(p);
        primas[indice2][1] = abecedario[indice3];
        indice2++;
        indice3++;
        return abecedario[indice2 - 1];
    }

    boolean hay_fact(String p) {
        String prima;
        int i, cont = 0, cont2 = 0, j = 0;
        probadas.add(p.charAt(0));
        ArrayList<String> fact = new ArrayList<>();
        ArrayList<String> list = a_comparar(p);
        ArrayList<String> ro;
        ArrayList<String> beta;
        ArrayList<ArrayList<String>> r = new ArrayList();
        String prueba, alfa = null, mayor = "0", tamaño = "0";
        for (String k : list) {
            i = k.length();
            while (i > 3) {
                prueba = k.substring(3, i);
                cont = -1;
                for (String l : list) {
                    if ((l.length() - 3) >= prueba.length()) {
                        if (prueba.equals(l.substring(3, 3 + prueba.length()))) {
                            cont++;
                        }
                    }
                }
                fact.add(k + "cris" + prueba + "cris" + cont + "cris" + prueba.length());
                i--;
            }
        }

        for (String f : fact) {
            String[] factores = f.split("cris");
            if (!factores[2].equals("0")) {
                cont2++;
            }
            if (factores[2].compareTo(mayor) > 0) {
                if (factores[2].compareTo(mayor) == 0) {
                    if (factores[3].compareTo(tamaño) > 0) {
                        mayor = factores[2];
                        alfa = factores[1];
                        tamaño = factores[3];
                    }
                } else {
                    mayor = factores[2];
                    alfa = factores[1];
                    tamaño = factores[3];
                }
            }
        }
        if (cont2 == 0) {
            return false;
        } else {
            r = ro(list, alfa);
            ro = r.get(0);
            beta = r.get(1);
            quitar_fact(p, ro, beta, alfa);
            return true;
        }
    }

    ArrayList a_comparar(String prod) {
        ArrayList<String> r = new ArrayList<>();
        Nodo k = ptr;
        while (k != null) {
            if (k.getProd().charAt(0) == prod.charAt(0)) {
                r.add(k.getProd());
            }
            k = k.link;
        }
        return r;
    }

    public void quitar_fact(String prod, ArrayList<String> ro, ArrayList<String> beta, String alfa) {
        Nodo k = ptr;
        Nodo i = null, ant = null;
        int primero = 0;
        String prima;
        while (k != null) {
            if (k.getProd().charAt(0) == prod.charAt(0)) {
                if (primero == 0) {
                    i = k;
                    primero++;
                    ant = k;
                    k = k.link;
                } else {
                    ant.link = k.link;
                    k = null;
                    k = ant.link;
                }
            } else {
                k = k.link;
            }
        }
        prima = dame_prima(prod.charAt(0));
        i.setProd(prod.charAt(0) + "->" + alfa + prima);
        Nodo temp = i.link;
        for (String ri : ro) {
            Nodo t1 = new Nodo(ri);
            i.link = t1;
            i = i.link;
        }
        for (String bi : beta) {
            Nodo t1 = new Nodo(prima + "->" + bi);
            i.link = t1;
            i = i.link;
        }
        i.link = temp;
    }

    ArrayList<ArrayList<String>> ro(ArrayList<String> list, String alfa) {
        ArrayList<String> ro = new ArrayList();
        ArrayList<String> beta = new ArrayList();
        ArrayList<ArrayList<String>> r = new ArrayList();
        int lengt;
        for (String l : list) {
            lengt = l.length();
            if (lengt >= 3 + alfa.length()) {
                if (!l.substring(3, 3 + alfa.length()).equals(alfa)) {
                    ro.add(l);
                } else {
                    if (l.substring(3 + alfa.length(), l.length()).equals("")) {
                        beta.add("&");
                    } else {
                        beta.add(l.substring(3 + alfa.length(), l.length()));
                    }
                }
            } else {
                ro.add(l);
            }
        }
        r.add(ro);
        r.add(beta);

        return r;
    }

    String dame_pM(char p) {
        String res = "";
        int i = 0;
        int tp;
        for (String t : cp) {
            tp = t.indexOf("cris");
            if (t.charAt(0) == p) {
                if (i == 0) {
                    res = t.substring(tp + 4, t.length());
                    i++;
                } else {
                    res = res + "cris" + t.substring(tp + 4, t.length());
                }
            }
        }
        return res;
    }

    boolean produce_e(char c) {
        Nodo k = ptr;
        while (k != null) {
            if (k.getProd().charAt(0) == c) {
                if (k.getProd().equals(c + "->&")) {
                    return true;
                }
            }
            k = k.link;
        }
        return false;
    }

    boolean tppe(char c) {
        for (String pp : cp) {
            if (pp.substring(0, 1).equals(c)) {
                if (pp.contains("&")) {
                    return true;
                }
            }
        }
        return false;
    }

    public void primero() {
        Nodo k = ptr;
        int i = 0, tp, in = 3;
        String cab;
        String g, rep, prod = "", ee = "";
        char prueba;
        while (k != null) {
            cp.add(k.getProd() + "cris" + unprimero(k.getProd()));
            k = k.link;
        }
        for (int j = 0; j < cp.size(); j++) {
            tp = cp.get(j).indexOf("cris");
            i = tp + 4;
            while (i < cp.get(j).length()) {
                prueba = cp.get(j).charAt(i);
                if (Character.isUpperCase(cp.get(j).charAt(i))) {
                    if (produce_e(cp.get(j).charAt(i))) {
                        prod = cp.get(j).substring(0, tp);
                        while (in < prod.length()) {
                            if (prod.charAt(in - 1) == cp.get(j).charAt(i)) {
                                ee = Character.toString(prod.charAt(in));
                                break;
                            }
                            in++;
                        }
                    }
                    cab = Character.toString(cp.get(j).charAt(i));
                    rep = cp.get(j).substring(tp, cp.get(j).length());
                    g = rep.replace(cab, dame_pM(cp.get(j).charAt(i)));
                    g = cp.get(j).substring(0, tp) + g;
                    if (!ee.equals("")) {
                        g = g + "cris" + ee;
                    }
                    ee = "";
                    cp.set(j, g);
                    j = -1;
                    break;
                }
                i = i + 5;
            }
        }
    }

    String unprimero(String w) {
        Nodo k = ptr;
        String res, tt;
        char cab;
        int i = 3;
        String prueba2;
        while (k != null) {
            if (k.getProd().equals(w)) {
                res = k.getProd().substring(3, 4);
                cab = k.getProd().charAt(3);
                if (Character.isUpperCase(cab)) {
                    while (produce_e(cab) && i + 1 < k.getProd().length()) {
                        res = res + "cris" + k.getProd().substring(i + 1, i + 2);
                        i++;
                        cab = k.getProd().charAt(i);
                    }
                }
                return res;
            }
            k = k.link;
        }
        return "nadaaaa";
    }

    public void sigueinte_p() {
        int pos, pos2, j = 0;
        String res = "";
        String cup, temp;
        char ca;
        char prueba, prueba2;
        ArrayList<String> cab = cabezas();
        int peso = 0;
        for (String c : cab) {
            res = "";
            Nodo k = ptr;
            while (k != null) {
                cup = k.getProd().substring(3, k.getProd().length());
                while (cup.contains(c)) {
                    pos = cup.indexOf(c);
                    pos2 = cup.length();
                    if (pos + 1 < cup.length()) {
                        prueba2 = cup.charAt(cup.indexOf(c) + 1);
                        if (Character.isUpperCase(cup.charAt(cup.indexOf(c) + 1))) {
                            if (tppe(cup.charAt(cup.indexOf(c) + 1)) || produce_e(cup.charAt(cup.indexOf(c) + 1))) {
                                if (res.equals("")) {
                                    res = damepp(cup.charAt(cup.indexOf(c) + 1));
                                } else {
                                    res = res + "cris" + damepp(cup.charAt(cup.indexOf(c) + 1));
                                }
                                if (pos + 2 < cup.length()) {
                                    j = pos + 2;
                                    temp = res;
                                    while (j < cup.length()) {
                                        if (tppe(cup.charAt(j)) || produce_e(cup.charAt(j))) {
                                            if (res.equals("")) {
                                                res = damepp(cup.charAt(j));
                                            } else {
                                                res = res + "cris" + damepp(cup.charAt(j));
                                            }
                                            j++;
                                        } else {
                                            if (res.equals("")) {
                                                res = "" + cup.charAt(j);
                                            } else {
                                                res = res + "cris" + cup.charAt(j);
                                            }
                                            break;
                                        }
                                    }
                                    if (res.equals(temp)) {
                                        if (c.charAt(0) != k.getProd().charAt(0)) {
                                            if (res.equals("")) {
                                                res = k.getProd().charAt(0) + "" + k.getProd().charAt(0);
                                            } else {
                                                res = res + "cris" + k.getProd().charAt(0) + k.getProd().charAt(0);
                                            }
                                        }
                                    }
                                } else {
                                    if (res.equals("")) {
                                        res = k.getProd().charAt(0) + "" + k.getProd().charAt(0);
                                    } else {
                                        res = res + "cris" + k.getProd().charAt(0) + k.getProd().charAt(0);
                                    }
                                }
                            } else {
                                if (res.equals("")) {
                                    res = Character.toString(cup.charAt(cup.indexOf(c) + 1));
                                } else {
                                    res = res + "cris" + Character.toString(cup.charAt(cup.indexOf(c) + 1));
                                }
                            }
                        } else {
                            if (res.equals("")) {
                                res = Character.toString(cup.charAt(cup.indexOf(c) + 1));
                            } else {
                                res = res + "cris" + Character.toString(cup.charAt(cup.indexOf(c) + 1));
                            }
                        }
                        prueba = cup.charAt(cup.indexOf(c));
                    } else {
                        if (c.charAt(0) != k.getProd().charAt(0)) {
                            if (res.equals("")) {
                                res = k.getProd().charAt(0) + "" + k.getProd().charAt(0);
                            } else {
                                res = res + "cris" + k.getProd().charAt(0) + k.getProd().charAt(0);
                            }
                        }
                    }
                    cup = cup.substring(cup.indexOf(c) + 1, cup.length());
                }
                k = k.link;
            }
            if (c.equals(inicial)) {
                sgts.add(c + "cris" + res + "cris$");
            } else {
                sgts.add(c + "cris" + res);
            }

        }
    }

    String damesp(char c) {
        int pos;
        String res = "";
        for (String sp : sgts) {
            if (c == sp.charAt(0)) {
                pos = sp.indexOf("cris") + 4;
                if (res.equals("")) {
                    res = sp.substring(pos, sp.length());
                } else {
                    res = res + "cris" + sp.substring(pos, sp.length());
                }
            }
        }
        return res;
    }

    String damepp(char c) {
        int pos;
        String res = "";
        for (String pp : cp) {
            if (c == pp.charAt(0)) {
                pos = pp.indexOf("cris") + 4;
                if (res.equals("")) {
                    res = pp.substring(pos, pp.length());
                } else {
                    res = res + "cris" + pp.substring(pos, pp.length());
                }
            }
        }
        return res;
    }

    ArrayList dameppcp(char c) {
        ArrayList<String> res = new ArrayList<>();
        int pos;
        for (String pp : cp) {
            if (c == pp.charAt(0)) {
                res.add(pp);
            }
        }
        return res;
    }

    public void ter_sgts() {
        String[] s;
        String res, g;
        boolean cambio = false;
        for (int i = 0; i < sgts.size(); i++) {
            if (i == 0) {
                cambio = false;
            }
            s = sgts.get(i).split("cris");
            for (int j = 1; j < s.length; j++) {
                if (!s[j].equals("")) {
                    if (Character.isUpperCase(s[j].charAt(0))) {
                        if (s[j].length() == 1) {
                            res = damepp(s[j].charAt(0));
                            g = sgts.get(i).replace(s[j], res);
                            sgts.set(i, g);
                            cambio = true;
                        } else {
                            if (s[j].length() == 2) {
                                if (s[j].charAt(0) == sgts.get(i).charAt(0)) {
                                    g = sgts.get(i).replace(s[j], "");
                                    sgts.set(i, g);
                                    cambio = true;
                                } else {
                                    res = damesp(s[j].charAt(0));
                                    g = sgts.get(i).replace(s[j], res);
                                    sgts.set(i, g);
                                    cambio = true;
                                }
                            }
                        }
                    }
                }
            }
            if (i == sgts.size() - 1 && cambio) {
                i = -1;
            }
        }
    }

    public void mostrar_p() {
        ArrayList<String> r = cabezas();
        String m = "";
        String d[];
        int i = 0, j = 1;
        for (String c : r) {
            m = c;
            for (String p : cp) {
                if (c.equals(p.substring(0, 1))) {
                    d = p.split("cris");
                    j = 1;
                    while (j < d.length) {
                        if (!m.contains(d[j])) {
                            if (i == 0) {
                                m = m + "  " + d[j];
                                i++;
                            } else {
                                m = m + "  " + d[j];
                            }
                        }
                        j++;
                    }
                }
            }
            primera.append(m);
            primera.append(System.getProperty("line.separator"));
        }
    }

    public void mostrar_s() {
        String d[];
        int i = 0, j = 1;
        String m = "";
        ArrayList<String> r = cabezas();
        for (String c : r) {
            m = c;
            for (String s : sgts) {
                if (c.equals(s.substring(0, 1))) {
                    d = s.split("cris");
                    j = 1;
                    while (j < d.length) {
                        if (!m.contains(d[j]) && !d[j].equals("&")) {
                            if (i == 0) {
                                m = m + "  " + d[j];
                                i++;
                            } else {
                                m = m + "  " + d[j];
                            }
                        }
                        j++;
                    }
                }
            }
            sgt.append(m);
            sgt.append(System.getProperty("line.separator"));
        }

    }

    ArrayList<String> cabezas() {
        ArrayList<String> r = new ArrayList();
        for (String p : cp) {
            if (!r.contains(p.substring(0, 1))) {
                r.add(p.substring(0, 1));
            }
        }
        return r;
    }

    ArrayList<String> term() {
        ArrayList<String> termi = new ArrayList();
        Nodo k = ptr;
        String p;
        char c;
        while (k != null) {
            p = k.getProd().substring(3, k.getProd().length());
            for (int i = 3; i < k.getProd().length(); i++) {
                c = k.getProd().charAt(i);
                if (!Character.isUpperCase(c)) {
                    if (!termi.contains(Character.toString(c))) {
                        termi.add(Character.toString(c));
                    }
                }
            }
            k = k.link;
        }
        return termi;
    }

    public void tablaM() {
        ArrayList<String> ter = term();
        ArrayList<String> pp;
        ArrayList<String> noter = cabezas();
        DefaultTableModel modelo = new DefaultTableModel();
        String[][] tm = new String[noter.size() + 1][ter.size() + 1];
        String[] col = new String[ter.size() + 1];
        String[] fila = new String[noter.size() + 1];
        String[] csp;
        String[] od = new String[ter.size()];
        modelo.addColumn("");
        String ppsc, sp, rep;
        int pos;
        int pos2 = 0;
        int h = 1;
        for (int i = 0; i < ter.size(); i++) {
            if (!ter.get(i).equals("&")) {
                tm[0][pos2 + 1] = ter.get(i);
                modelo.addColumn(ter.get(i));
                pos2++;
            }
        }
        modelo.addColumn("$");
        tm[0][ter.size()] = "$";
        for (int i = 0; i < noter.size(); i++) {
            tm[i + 1][0] = noter.get(i);
            fila[0] = noter.get(i);
            modelo.addRow(fila);
        }
        for (int i = 0; i < noter.size(); i++) {
            pp = dameppcp(noter.get(i).charAt(0));
            for (int j = 0; j < ter.size(); j++) {
                for (String cu : pp) {
                    ppsc = cu.substring(cu.indexOf("cris") + 4, cu.length());
                    if (ppsc.contains(ter.get(j))) {
                        if (ter.get(j).equals("&")) {
                            sp = damesp(noter.get(i).charAt(0));
                            csp = sp.split("cris");
                            rep = "";
                            for (int k = 0; k < csp.length; k++) {
                                if (!rep.contains(csp[k])) {
                                    if (csp[k].charAt(0) != "&".charAt(0)) {
                                        rep = rep + csp[k];
                                        pos = postm(tm, csp[k].charAt(0), ter.size() + 2);
                                        modelo.setValueAt(cu.substring(0, cu.indexOf("cris")), i, pos);
                                    }
                                }
                            }
                        } else {
                            tm[i + 1][j + 1] = cu.substring(0, cu.indexOf("cris"));
                            modelo.setValueAt(cu.substring(0, cu.indexOf("cris")), i, j + 1);
                        }
                    }
                }
            }
        }
        Nodo k = ptr2;
        String prueba;
        String prueba1;
        ArrayList<String> yaesta = new ArrayList<>();
        int rr = 0, cc = 0;
        while (k != null) {
            if (!yaesta.contains(k.getProd().substring(0, 1))) {
                h = 0;
                while (h < noter.size()) {
                    if (modelo.getValueAt(h, 0).equals(k.getProd().substring(0, 1))) {
                        modelo.moveRow(h,h, rr);
                        yaesta.add(k.getProd().substring(0, 1));
                        rr++;
                        break;
                    }
                    h++;
                }
            }
            k = k.link;
        }
        tbm.setModel(modelo);
    }

    String[] damefila(String[][] t, int tam, int nf) {
        String[] res = new String[tam];
        System.arraycopy(t[nf], 1, res, 1, tam - 1);
        return res;
    }

    int postm(String[][] tm, char t, int lim) {
        for (int i = 0; i < lim; i++) {
            if (i != 0) {
                if (t == tm[0][i].charAt(0)) {
                    return i;
                }
            }

        }
        return -1;
    }

    String tiene_prima(char c) {
        for (int i = 0; i < indice; i++) {
            if (c == primas[i][0].charAt(0)) {
                return primas[i][1].substring(0, 1);
            }
        }
        return "";
    }

    String es_prima(char c) {
        for (int i = 0; i < indice; i++) {
            if (c == primas[i][1].charAt(0)) {
                return primas[i][0].substring(0, 1);
            }
        }
        return "";
    }


    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        JFileChooser chooser = new JFileChooser();
        int isselected = chooser.showSaveDialog(null);
        String line;
        file = chooser.getSelectedFile();
        if (isselected == JFileChooser.APPROVE_OPTION) {
            file_path.setText(file.getAbsolutePath());
            BufferedReader reader;
            try {
                reader = new BufferedReader(new FileReader(file));
                line = reader.readLine();
                while (line != null) {
                    agregar_prod2(line);
                    line = reader.readLine();
                }
                rapartir();
                mostrar_prod();
                System.out.println("------------------");
                ordenar();
                primero();
                mostrar_p();
                sigueinte_p();
                ter_sgts();
                mostrar_s();
                tablaM();

            } catch (Exception e) {
                System.out.println("eeeeeeeeeeeeeeeeeeeeeeeeeeeeee");
                System.out.println(e.toString());
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    String mejorop(String e, String nt) {
        Nodo k = ptr;
        String temp;
        for (int i = e.length() - 1; i > e.length() - 1; i--) {
            temp = e.substring(0, i);
            while (k != null) {
                if (k.getProd().substring(3, k.getProd().length()).equals(temp)) {
                    return k.getProd();
                }
                k = k.link;
            }
        }
        return "";
    }

    String mejorop2(String e, String nt) {
        Nodo k = ptr;
        String temp = null;
        int cont = 0, mayor = 0;
        while (k != null) {
            if (nt.equals(k.getProd().substring(0, 1))) {
                cont = 0;
                for (int i = 0; i < e.length(); i++) {
                    if (k.getProd().substring(3, k.getProd().length()).contains(e.substring(i, i + 1))) {
                        cont++;
                    }
                    if (cont >= mayor) {
                        temp = k.getProd();
                        mayor = cont;
                    }
                }
            }
            k = k.link;
        }
        return temp;
    }

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        String cad = cadena.getText();
        String mo;
        int i = 0;
        ArrayList<String> pila = new ArrayList();
        ArrayList<String> entrada = new ArrayList();
        ArrayList<String> salida = new ArrayList();
        pila.add("$" + inicial);
        entrada.add(cad + "$");
        String prueba, prueba1;
        while (!pila.get(i).equals("") && !entrada.get(i).equals("")) {
            mo = mejorop2(entrada.get(i).substring(0, entrada.get(i).length() - 1), pila.get(i).substring(1, pila.get(i).length()));
            if (mo.equals("")) {
                salida.add("no aceptar");
                break;
            } else {
                salida.add(mo);
                i++;
            }
            pila.add(pila.get(i - 1).replace(pila.get(i).substring(1, pila.get(i).length()), mo));
            entrada.add(entrada.get(i - 1));
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField cadena;
    private javax.swing.JTextField file_path;
    private javax.swing.JTextArea gramatica;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTextArea primera;
    private javax.swing.JTextArea sgt;
    private javax.swing.JTable tbm;
    private javax.swing.JTable trecon;
    // End of variables declaration//GEN-END:variables
}
